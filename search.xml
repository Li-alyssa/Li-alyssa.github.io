<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ES6 class</title>
      <link href="/2022/04/01/ES6/ES6-class/"/>
      <url>/2022/04/01/ES6/ES6-class/</url>
      
        <content type="html"><![CDATA[<h1 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h1><p> ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过 class 关键 字，可以定义类。基本上，ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做 到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已； </p><h1 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h1><ol><li>class 声明类； </li><li>constructor 定义构造函数初始化； </li><li>extends 继承父类； </li><li>super 调用父级构造方法； </li><li>static 定义静态方法和属性；</li><li>父类方法可以重写；</li></ol><p>​    </p><h1 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h1><p>es5方式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand,price</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加方法</span></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property">phototype</span>.<span class="property">call</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打电话&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Huawei</span> = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&#x27;HUAWEI&#x27;</span>,<span class="number">3999</span>);</span><br><span class="line"><span class="title class_">Huawei</span>.<span class="title function_">call</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Huawei</span>);</span><br></pre></td></tr></table></figure><p>ES6写法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="comment">//构造方法，名字不能修改</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand,price</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法必须使用该语法</span></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">OnePlus</span> = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;1+&quot;</span>,<span class="number">3999</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">OnePlus</span>);</span><br></pre></td></tr></table></figure><h1 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h1><p>es5写法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title class_">Phone</span>.<span class="property">name</span> = <span class="string">&quot;手机&quot;</span>;</span><br><span class="line">运行结果：</span><br><span class="line"><span class="title class_">ES5</span>构造函数实现继承：</span><br><span class="line">代码实现：</span><br><span class="line"><span class="title class_">Phone</span>.<span class="property">change</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以改变世界！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> nokia = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nokia.<span class="property">name</span>); <span class="comment">// undefined</span></span><br><span class="line">nokia.<span class="title function_">change</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">报错：<span class="title class_">Uncaught</span> <span class="title class_">TypeError</span>: nokia.<span class="property">change</span> is not a <span class="keyword">function</span></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">color</span> = <span class="string">&quot;黑色&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nokia.<span class="property">color</span>); <span class="comment">// 黑色</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Phone</span>.<span class="property">name</span>);</span><br><span class="line"><span class="title class_">Phone</span>.<span class="title function_">change</span>();</span><br><span class="line">注意：实例对象和函数对象的属性是不相通的</span><br></pre></td></tr></table></figure><p>es6</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line"><span class="comment">// 静态属性</span></span><br><span class="line"><span class="keyword">static</span> name = <span class="string">&quot;手机&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以改变世界！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> nokia = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nokia.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Phone</span>.<span class="property">name</span>);</span><br><span class="line"><span class="title class_">Phone</span>.<span class="title function_">change</span>();</span><br></pre></td></tr></table></figure><h1 id="对象继承"><a href="#对象继承" class="headerlink" title="对象继承"></a>对象继承</h1><p>ES5</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5构造函数继承</span></span><br><span class="line"><span class="comment">// 手机</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand,price</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 智能手机</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SmartPhone</span>(<span class="params">brand,price,color,size</span>)&#123;</span><br><span class="line"><span class="title class_">Phone</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,brand,price);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置子级构造函数的原型</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Phone</span>;</span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SmartPhone</span>;</span><br><span class="line"><span class="comment">// 声明子类的方法</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">photo</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以拍照！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">game</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以玩游戏！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> chuizi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&quot;锤子&quot;</span>,<span class="number">2499</span>,<span class="string">&quot;黑色&quot;</span>,<span class="string">&quot;5.5inch&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chuizi);</span><br><span class="line">chuizi.<span class="title function_">call</span>();</span><br><span class="line">chuizi.<span class="title function_">photo</span>();</span><br><span class="line">chuizi.<span class="title function_">game</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ES6</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6class类继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">brand,price</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span>&#123;</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">brand,price,color,size</span>) &#123;</span><br><span class="line"><span class="variable language_">super</span>(brand,price); <span class="comment">// 调用父类构造函数</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">photo</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以拍照！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">game</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以玩游戏！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> chuizi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&quot;小米&quot;</span>,<span class="number">1999</span>,<span class="string">&quot;黑色&quot;</span>,<span class="string">&quot;5.15inch&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chuizi);</span><br><span class="line">chuizi.<span class="title function_">call</span>();</span><br><span class="line">chuizi.<span class="title function_">photo</span>();</span><br><span class="line">chuizi.<span class="title function_">game</span>();</span><br><span class="line"> <span class="comment">// ES6class类继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">brand,price</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span>&#123;</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">brand,price,color,size</span>) &#123;</span><br><span class="line"><span class="variable language_">super</span>(brand,price); <span class="comment">// 调用父类构造函数</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">photo</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以拍照！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">game</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以玩游戏！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> chuizi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&quot;小米&quot;</span>,<span class="number">1999</span>,<span class="string">&quot;黑色&quot;</span>,<span class="string">&quot;5.15inch&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chuizi);</span><br><span class="line">chuizi.<span class="title function_">call</span>();</span><br><span class="line">chuizi.<span class="title function_">photo</span>();</span><br><span class="line">chuizi.<span class="title function_">game</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> 前端基础 </tag>
            
            <tag> class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表</title>
      <link href="/2022/03/30/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/222/"/>
      <url>/2022/03/30/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/222/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h2><p>线性表（List） ：零个或多个数据元素的有限序列</p><p>关键：序列、有限</p><p>在较复杂的线性表中，一个数据元素可以由若干个数据项组成。</p><h2 id="线性表的抽象数据类型"><a href="#线性表的抽象数据类型" class="headerlink" title="线性表的抽象数据类型"></a>线性表的抽象数据类型</h2><p>ADT List{<br>数据对象：D&#x3D;{ai|ai∈ElemSet,i&#x3D;1,2,…,n,n≥0}</p><p>数据关系：R&#x3D;{&lt;ai-1,ai&gt;|ai-1,ai∈D,i&#x3D;2,…,n}</p><p>基本操作：</p><p><strong>InitList(&amp;L)</strong></p><p>操作结果:构造一个空的线性表L。</p><p><strong>DestroyList(&amp;L)</strong></p><p>初始条件:线性表L已经存在。</p><p>操作结果:销毁线性表L。</p><p><strong>ClearList(&amp;L)</strong></p><p>初始条件:线性表L已经存在。</p><p>操作结果:将线性表L重置为空表。</p><p><strong>ListEmpty(L)</strong></p><p>初始条件:线性表L已经存在。</p><p>操作结果:若线性表L为空表，则返回TURE; 否则返回FALSE。</p><p><strong>ListLength(L)</strong></p><p>初始条件:线性表L已经存在。</p><p>操作结果:返回线性表L中的数据元素个数。</p><p><strong>GetElem(L,i,&amp;e)</strong></p><p>初始条件:线性表L已经存在，1 &lt;&#x3D;i&lt;&#x3D; ListLengthy。</p><p>操作结果:用e返回线性表L中第i个数据元素的值。</p><p><strong>LocateElem(L,e,compare())</strong></p><p>初始条件:线性表L已经存在，compare()是数据元素判定函数。</p><p>操作结果:返回L中第1个与e满足compare()的数据元素的位序。若这样的数据元素不存在则返回值为0。</p><p><strong>PriorElem(L, cur_e, &amp;pre_e)</strong></p><p>初始条件: 线性表L已经存在。</p><p>操作结果:若cur_e是L的数据元素，且不是第一个，则用pre_e返回它的前驱否则操作失败; pre_ e无意义。</p><p><strong>NextElem(L, cur_ e, &amp;next_e)</strong></p><p>初始条件:线性表L已经存在。</p><p>操作结果:若cur_ e是L的数据元素，且不是第最后个，则用next_e返回它的后继，否则操作失败， next_e无意义。</p><p><strong>ListInsert(&amp;L, i, e)</strong></p><p>初始条件:线性表L已经存在，1&lt;&#x3D;i&lt;&#x3D; ListLength(L)+1。</p><p>操作结果:在L的第i个位置之前插入新的数据元素e, L的长度加一。</p><p>插入元素e之前(长度为n) :(a2….. a-1.a…,.n,)</p><p>插入元素e之后(长度为n+1) :(a,a2…. ai-1,e,ai,…,an)</p><p><strong>ListDelete(&amp;L,i,&amp;e)</strong></p><p>初始条件:线性表L已经存在，1&lt;&#x3D;i&lt;&#x3D; ListLength(L)。</p><p>操作结果:删除L的第i个数据元素，并用e返回其值，L的长度减一</p><p>删除前(长度为n) :</p><p>( a,a2… ai-1, ai, ai+1,…,an)</p><p>删除后(长度为n-1 ) :</p><p>(a1,a2….,ai-1,ai+1,…,an)</p><p><strong>ListTraverse(&amp;L, visited())</strong></p><p>初始条件:线性表L已经存在</p><p>操作结果:依次对线性表中每个元素调用visited()</p><h3 id="操作原则"><a href="#操作原则" class="headerlink" title="操作原则"></a>操作原则</h3><p>当你传递一个参数给函数的时候，这个参数会不会在函数内被改动决定了使用什么参数形式。</p><p>如果需要被改动，则需要传递指向这个参数的指针。</p><p>如果不需要被改动，可以直接传递这个参数。</p><h2 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h2><p>指用一段地址连续的存储单元一次存储线性表的数据元素。</p><h4 id="描述顺序存储结构的三个属性"><a href="#描述顺序存储结构的三个属性" class="headerlink" title="描述顺序存储结构的三个属性"></a>描述顺序存储结构的三个属性</h4><ul><li>存储空间的起始位置：数组data，它的存储位置就是存储空间的存储位置</li><li>线性表的最大存储容量：数组长度MAXSIZE</li><li>线性表的当前长度：length</li></ul><h4 id="顺序存储结构的插入与删除"><a href="#顺序存储结构的插入与删除" class="headerlink" title="顺序存储结构的插入与删除"></a>顺序存储结构的插入与删除</h4><h5 id="插入算法思路"><a href="#插入算法思路" class="headerlink" title="插入算法思路"></a>插入算法思路</h5><ol><li>如果插入位置不合理，抛出异常</li><li>如果线性表长度大于等于数组长度，则抛出异常或动态增加容量</li><li>从最后一个元素开始向前遍历到第i个位置，分别向他们都向后移动一个位置</li><li>将要插入元素填入位置i处</li><li>表长+1</li></ol><h5 id="删除算法思路"><a href="#删除算法思路" class="headerlink" title="删除算法思路"></a>删除算法思路</h5><ol><li>如果删除位置不合理，抛出异常</li><li>取出删除元素</li><li>从删除元素位置开始遍历到最后一个元素位置，分别将他们都向前移动一个位置</li><li>表长-1</li></ol><h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>读取数据：O(1)</p><p>插入或删除：O(n)</p><h4 id="线性表顺序存储结构的优缺点"><a href="#线性表顺序存储结构的优缺点" class="headerlink" title="线性表顺序存储结构的优缺点"></a>线性表顺序存储结构的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>无需为表示表中元素之间的逻辑关系而增加额外的存储空间</li><li>可以快速地存取表中任一位置的元素</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>插入和删除操作需要移动大量元素</li><li>当线性表长度变化较大时，难以确定存储空间的容量</li><li>造成存储空间的”碎片“</li></ul><h2 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h2><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 总结 </tag>
            
            <tag> 线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构绪论+算法绪论</title>
      <link href="/2022/03/28/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/111/"/>
      <url>/2022/03/28/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/111/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构绪论"><a href="#数据结构绪论" class="headerlink" title="数据结构绪论"></a>数据结构绪论</h1><p>1.数据对象由数据元素组成，数据元素又由若干数据项组成</p><p>2.数据结构的定义：数据结构是相互之间存在一种或多种待定关系的数据元素的集合。</p><p>3.数据结构分类：</p><p>以逻辑结构划分</p><ul><li>集合结构</li><li>线性结构</li><li>树形结构</li><li>图形结构</li></ul><p>以物理结构划分</p><ul><li>顺序存储结构</li><li>链式存储结构</li></ul><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h3 id="算法的定义"><a href="#算法的定义" class="headerlink" title="算法的定义"></a>算法的定义</h3><p>算法是解决特定问题求解步骤的描述，在计算机中为指令的有限序列，并且每条指令表示一个或多个操作。</p><h3 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h3><ul><li>有穷性：指算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每个步骤在可接受的时间内完成。</li><li>确定性：算法的每一个步骤都具有确定的含义，不会出现二义性。</li><li>可行性：算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成。</li><li>输入：0个或者多个。</li><li>输出：至少1个或者多个。</li></ul><h3 id="算法的设计要求"><a href="#算法的设计要求" class="headerlink" title="算法的设计要求"></a>算法的设计要求</h3><ul><li>正确性：算法的正确性是指算法至少应该具有输入，输出和加工处理无歧义性，能正确反映问题的需求，能够得到问题上的正确答案。</li><li>可读性：算法设计的另外一个目的是为了便于阅读，理解和交流。</li><li>健壮性：当输入数据不合法时，算法也应该做出相关处理，而不是产生异常或莫名其妙的结果。</li><li>高效率和低存储量需求：设计算法应该尽量满足时间效率高和存储量低的要求。</li></ul><p>注意：特性和设计要求切忌搞混，需对比记忆</p><h3 id="算法的度量方法"><a href="#算法的度量方法" class="headerlink" title="算法的度量方法"></a>算法的度量方法</h3><ul><li>事后统计方法（不科学、不准确）</li><li>事前分析估算方法</li></ul><h3 id="事前分析估算方法"><a href="#事前分析估算方法" class="headerlink" title="事前分析估算方法"></a>事前分析估算方法</h3><h5 id="函数渐进增长的定义"><a href="#函数渐进增长的定义" class="headerlink" title="函数渐进增长的定义"></a>函数渐进增长的定义</h5><p>给定两个函数f(n)和g(n)，如果存在一个整数<em>N</em>,使得对于所有的n&gt;<em>N</em>,f(n)总是比f(n)大，那么我们说f(n)的增长渐快于g(n)。于是我们可以得出一个结论，判断一个算法好不好，我们只通过少量的数据是不能做出准确判断的，如果我们可以对比算法的关键执行次数函数的渐进增长性，基本就可以分析出：某个算法，随着n的变大，他会越来越优于另一个算法，或者越来越差于另一个算法。</p><h5 id="算法时间复杂度定义"><a href="#算法时间复杂度定义" class="headerlink" title="算法时间复杂度定义"></a>算法时间复杂度定义</h5><p>在进行算法分析时，语句总的执行次数T(n）是关于问题规模n的函数，进而分析T(n）随n的变化情况并确定T(n）的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n)&#x3D;O(f(n))。它表示随问题规模n的增大，算法执行时间的增长率和f(n）的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f(n）是问题规模n的某个函数。 这样用大写O( )来体现算法时间复杂度的记法，我们称之为大O记法。 一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。</p><h5 id="推导大O阶"><a href="#推导大O阶" class="headerlink" title="推导大O阶"></a>推导大O阶</h5><ol><li>用常数1取代运行时间中的所有加法常数。</li><li>在修改后的运行次数函数中，只保留最高阶项。</li><li>如果最高阶项存在且其系数不是1，则去除与这个项相乘的系数。</li></ol><p>得到的结果就是大O阶。</p><p>通过这些步骤，我们可以在得到算法的运行次数表达式后，很快得到它的时间复杂度，即大O阶。</p><p>常见时间复杂度所耗时间的大小排列</p><p>O（1）&lt;O（logN）&lt;O（n）&lt;O（NlogN）&lt;O（n的平方）&lt;O（n的立方）&lt;O（2的n次方）&lt;O（n!）&lt;O（n的n次方）</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 绪论 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 promise</title>
      <link href="/2022/03/28/ES6/ES6-promise/"/>
      <url>/2022/03/28/ES6/ES6-promise/</url>
      
        <content type="html"><![CDATA[<h1 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h1><p> Promise 是 ES6 引入的异步编程的新解决方案。</p><p>语法上 Promise 是一个构造函数，用来封装异步操作 并可以获取其成功或失败的结果；</p><ol><li>Promise 构造函数: Promise (excutor) {}； </li><li>Promise.prototype.then 方法； </li><li>Promise.prototype.catch 方法；</li></ol><p>实例化Promise对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//成功</span></span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;数据库的用户数据&#x27;</span></span><br><span class="line">        <span class="comment">//调用resolve，这个Promise 对象的状态就会变成成功</span></span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">    <span class="comment">//失败</span></span><br><span class="line">    <span class="keyword">let</span> err = <span class="string">&#x27;数据读取失败&#x27;</span>;</span><br><span class="line">    <span class="title function_">reject</span>(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用promise对象的then方法</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(reason)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Promise-封装读取文件"><a href="#Promise-封装读取文件" class="headerlink" title="Promise 封装读取文件"></a>Promise 封装读取文件</h1><h3 id="一般写法"><a href="#一般写法" class="headerlink" title="一般写法"></a>一般写法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 2、调用方法，读取文件</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;resources/为学.md&quot;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 如果失败则抛出错误</span></span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="comment">// 如果没有出错，则输出内容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise封装"><a href="#Promise封装" class="headerlink" title="Promise封装"></a>Promise封装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 2、调用方法，读取文件</span></span><br><span class="line"><span class="comment">// fs.readFile(&quot;resources/为学.md&quot;,(err,data)=&gt;&#123;</span></span><br><span class="line"><span class="comment">// // 如果失败则抛出错误</span></span><br><span class="line"><span class="comment">// if(err) throw err;</span></span><br><span class="line"><span class="comment">// // 如果没有出错，则输出内容</span></span><br><span class="line"><span class="comment">// console.log(data.toString());</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 3、使用Promise封装</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,data</span>)&#123;</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;resources/text.txt&quot;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 判断如果失败</span></span><br><span class="line"><span class="keyword">if</span>(err) <span class="title function_">reject</span>(err);</span><br><span class="line"><span class="comment">// 如果成功</span></span><br><span class="line"><span class="title function_">resolve</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>());</span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reason); <span class="comment">// 读取失败</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Promise封装AJAX请求"><a href="#Promise封装AJAX请求" class="headerlink" title="Promise封装AJAX请求"></a>Promise封装AJAX请求</h1><h3 id="原生请求"><a href="#原生请求" class="headerlink" title="原生请求"></a>原生请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求地址：https://api.apiopen.top/getJoke</span></span><br><span class="line"><span class="comment">// 原生请求</span></span><br><span class="line"><span class="comment">// 1、创建对象</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 2、初始化</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line"><span class="comment">// 3、发送</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line"><span class="comment">// 4、绑定事件，处理响应结果</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">// 判断状态</span></span><br><span class="line"><span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span>)&#123;</span><br><span class="line"><span class="comment">// 判断响应状态码 200-299</span></span><br><span class="line"><span class="keyword">if</span>(xhr.<span class="property">status</span>&gt;=<span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span>&lt;=<span class="number">299</span>)&#123;</span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 失败</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(xhr.<span class="property">status</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Promise封装-1"><a href="#Promise封装-1" class="headerlink" title="Promise封装"></a>Promise封装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求地址：https://api.apiopen.top/getJoke</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reason</span>)&#123;</span><br><span class="line"><span class="comment">// 原生请求</span></span><br><span class="line"><span class="comment">// 1、创建对象</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 2、初始化</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line"><span class="comment">// 3、发送</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line"><span class="comment">// 4、绑定事件，处理响应结果</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">// 判断状态</span></span><br><span class="line"><span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span>)&#123;</span><br><span class="line"><span class="comment">// 判断响应状态码 200-299</span></span><br><span class="line"><span class="keyword">if</span>(xhr.<span class="property">status</span>&gt;=<span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span>&lt;=<span class="number">299</span>)&#123;</span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line"><span class="title function_">resolve</span>(xhr.<span class="property">response</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 失败</span></span><br><span class="line"><span class="title function_">reason</span>(xhr.<span class="property">status</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定回调</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>());</span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reason); <span class="comment">// 读取失败</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then"></a>Promise.prototype.then</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise.prototype.then<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 创建 Promise 对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">resolve</span>(<span class="string">&quot;用户数据&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 调用then方法，then方法的返回结果是promise对象，</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 对象的状态有回调函数的结果决定;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> result = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1、如果回调函数中返回的结果是 非promise 类型的数据，</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 状态为成功，返回值为对象的成功值resolved</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// [[PromiseStatus]]:&quot;resolved&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// [[PromiseValue]]:123</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// return 123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2、如果...是promise类型的数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 此Promise对象的状态决定上面Promise对象p的状态</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// return new Promise((resolve,reject)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// // resolve(&quot;ok&quot;); // resolved</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// reject(&quot;ok&quot;); // rejected</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 3、抛出错误</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// throw new Error(&quot;失败啦！&quot;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 状态：rejected</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// value：失败啦！</span></span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">error</span>(reason);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// Promise方法可以链式调用</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// then里面两个函数参数，可以只写一个</span></span></span><br><span class="line"><span class="language-javascript">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//链式调用可以改变之前回调地狱的现象</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Promise实践，读取多个文件"><a href="#Promise实践，读取多个文件" class="headerlink" title="Promise实践，读取多个文件"></a>Promise实践，读取多个文件</h1><h3 id="回调地狱写法："><a href="#回调地狱写法：" class="headerlink" title="回调地狱写法："></a>回调地狱写法：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入fs</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fs.readFile(&#x27;./resources/为学.md&#x27;, (err, data1) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     fs.readFile(&#x27;./resources/浪淘沙.md&#x27;, (err, data2) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         fs.readFile(&#x27;./resources/洛神赋.md&#x27;, (err, data3) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//             let result = data1 + &#x27;\r\n&#x27; + data2 + &#x27;\r\n&#x27; + data3;</span></span><br><span class="line"><span class="comment">//             console.log(result);</span></span><br><span class="line"><span class="comment">//         &#125;);</span></span><br><span class="line"><span class="comment">//     &#125;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用promise实现"><a href="#使用promise实现" class="headerlink" title="使用promise实现"></a>使用promise实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/为学.md&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(value.toString());</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/浪淘沙.md&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>([value, data]);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/洛神赋.md&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//压入</span></span><br><span class="line">            value.<span class="title function_">push</span>(data);</span><br><span class="line">            <span class="title function_">resolve</span>(value);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">join</span>(<span class="string">&#x27;\r\n&#x27;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="catch-方法"><a href="#catch-方法" class="headerlink" title="catch 方法"></a>catch 方法</h1><p>用于指定promise对象失败后的回调</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&quot;出错啦&quot;</span>)；</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//传统写法</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;&#125;,<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(reason);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//catch方法</span></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>)=&gt;&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> 前端基础 </tag>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 生成器</title>
      <link href="/2022/03/28/ES6/ES6-%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2022/03/28/ES6/ES6-%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h1><p>生成器：函数</p><p>是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同；</p><p>&#x2F;&#x2F;异步编程：纯回调函数</p><p>&#x2F;&#x2F;yield为函数代码的分隔符</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello generator&quot;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;ddddd&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;dddddddd&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;ddddddddddddd&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line"><span class="comment">//console.log(iterator);</span></span><br><span class="line">iteerator.<span class="title function_">next</span>();</span><br><span class="line">iteerator.<span class="title function_">next</span>();</span><br><span class="line">iteerator.<span class="title function_">next</span>();</span><br><span class="line">iteerator.<span class="title function_">next</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">gen</span>())&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="生成器函数的参数传递"><a href="#生成器函数的参数传递" class="headerlink" title="生成器函数的参数传递"></a>生成器函数的参数传递</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>生成器函数的参数传递<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params">arg</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(one);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(two);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> three = <span class="keyword">yield</span> <span class="number">333</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(three);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"><span class="comment">//执行获取迭代器对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&quot;AAA&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// 会执行yield 111;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// next()方法是可以传入参数的，传入的参数作为第一条(上一条)语句yield 111的返回结果</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;BBB&quot;</span>)); <span class="comment">// 会执行yield 222;</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;CCC&quot;</span>)); <span class="comment">// 会执行yield 333;</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;DDD&quot;</span>)); <span class="comment">// 继续往后走，未定义;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="生成器函数实例1"><a href="#生成器函数实例1" class="headerlink" title="生成器函数实例1"></a>生成器函数实例1</h1><p>异步编程  </p><p>1s后控制台输出111 2s后输出222 3s后输出333</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>生成器函数实例1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 异步编程 文件操作 网络操作（ajax，request） 数据库操作</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 需求：1s后控制台输出111 再过2s后控制台输出222 再过3s后控制台输出333</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 一种做法：回调地狱</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// setTimeout(()=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(111);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// setTimeout(()=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(222);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// setTimeout(()=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(333);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;,3000)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;,2000)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;,1000)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 另一种做法</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span></span><br><span class="line"><span class="language-javascript">iterator.<span class="title function_">next</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span></span><br><span class="line"><span class="language-javascript">iterator.<span class="title function_">next</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span></span><br><span class="line"><span class="language-javascript">iterator.<span class="title function_">next</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">yield</span> <span class="title function_">one</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">yield</span> <span class="title function_">two</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">yield</span> <span class="title function_">three</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 调用生成器函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span></span><br><span class="line"><span class="language-javascript">iterator.<span class="title function_">next</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="生成器函数实例2"><a href="#生成器函数实例2" class="headerlink" title="生成器函数实例2"></a>生成器函数实例2</h1><p>&#x2F;&#x2F;模拟获取  先后获取用户数据  订单数据   商品数据</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>生成器函数实例2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 模拟获取: 用户数据 订单数据 商品数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">getUsers</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> data = <span class="string">&quot;用户数据&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 第二次调用next，传入参数，作为第一个的返回值</span></span></span><br><span class="line"><span class="language-javascript">iterator.<span class="title function_">next</span>(data); <span class="comment">// 这里将data传入</span></span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">getOrders</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> data = <span class="string">&quot;订单数据&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 第三次调用next，传入参数，作为第二个的返回值</span></span></span><br><span class="line"><span class="language-javascript">iterator.<span class="title function_">next</span>(data); <span class="comment">// 这里将data传入</span></span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">getGoods</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> data = <span class="string">&quot;商品数据&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 第四次调用next，传入参数，作为第三个的返回值</span></span></span><br><span class="line"><span class="language-javascript">iterator.<span class="title function_">next</span>(data); <span class="comment">// 这里将data传入</span></span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> users = <span class="keyword">yield</span> <span class="title function_">getUsers</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(users);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> orders = <span class="keyword">yield</span> <span class="title function_">getOrders</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(orders);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> goods = <span class="keyword">yield</span> <span class="title function_">getGoods</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(goods); <span class="comment">// 这种操作有点秀啊！</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//调用生成器函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//第一次调用next</span></span></span><br><span class="line"><span class="language-javascript">iterator.<span class="title function_">next</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> 前端基础 </tag>
            
            <tag> 生成器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 迭代器</title>
      <link href="/2022/03/28/ES6/ES6-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>/2022/03/28/ES6/ES6-%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h1><p>遍历器（Iterator）就是一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数 据结构只要部署 Iterator 接口，就可以完成遍历操作；</p><h1 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h1><p>ES6 创造了一种新的遍历命令 for…of 循环，Iterator 接口主要供 for…of 消费； 原生具备 iterator 接口的数据(可用 for of 遍历)： Array； Arguments； Set； Map； String； TypedArray； NodeList；</p><h1 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h1><ol><li>创建一个指针对象，指向当前数据结构的起始位置； </li><li>第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员； </li><li>接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员； </li><li>每调用 next 方法返回一个包含 value 和 done 属性的对象； 注：需要自定义遍历数据的时候，要想到迭代器；done为度的完成时，为真表示遍历或循环完成</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明一个数组</span></span><br><span class="line"><span class="keyword">const</span> xiyou = [<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;SS&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用for...in遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">in</span> xiyou)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">此时打印</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="comment">//声明一个数组</span></span><br><span class="line"><span class="keyword">const</span> xiyou = [<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;SS&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用for...of遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> xiyou)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">此时打印</span><br><span class="line">T</span><br><span class="line">S</span><br><span class="line">Z</span><br><span class="line"><span class="variable constant_">SS</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiyou);</span><br><span class="line">打印出<span class="title class_">Symbol</span>.<span class="title function_">iterator</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = xiyou[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="comment">// 调用对象的next方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// 重新初始化对象，指针也会重新回到最前面</span></span><br><span class="line"><span class="keyword">let</span> iterator1 = xiyou[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator1.<span class="title function_">next</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="插话：for-in和for-of的区别"><a href="#插话：for-in和for-of的区别" class="headerlink" title="插话：for in和for of的区别"></a>插话：for in和for of的区别</h3><p>记住，for in遍历的是数组的索引（即键名），for of遍历的是数组元素值</p><p>所以 for in循环获得对象键名，for of循环获得键值</p><h4 id="ES5语法"><a href="#ES5语法" class="headerlink" title="ES5语法"></a>ES5语法</h4><p>从ES5开始说起，除开forEach，es5具有遍历数组功能的还有map、filter、some、every、reduce、reduceRight等，只不过他们的返回结果不一样。但是使用foreach遍历数组的话，使用break不能中断循环，使用return也不能返回到外层函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">method</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">　　<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">length</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myArray=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">myArray.<span class="property">name</span>=<span class="string">&quot;数组&quot;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> myArray) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(myArray[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for-in遍历数组的毛病"><a href="#for-in遍历数组的毛病" class="headerlink" title="for in遍历数组的毛病"></a>for in遍历数组的毛病</h4><p>1.index索引为字符串型数字，不能直接进行几何运算<br>2.遍历顺序有可能不是按照实际数组的内部顺序<br>3.使用for in会遍历数组所有的可枚举属性，包括原型。例如上栗的原型方法method和name属性<br> 所以for in更适合遍历对象，不要使用for in遍历数组。</p><p>那么除了使用for循环，如何更简单的正确的遍历数组达到我们的期望呢（即不遍历method和name），ES6中的for of更胜一筹.</p><h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><p>通常用for in遍历对象的键名</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">method</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">　　<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myObject=&#123;</span><br><span class="line">　　<span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">　　<span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">　　<span class="attr">c</span>:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> myObject) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for in 可以遍历到myObject的原型方法method,如果不想遍历原型方法和属性的话，可以在循环内部判断一下,hasOwnPropery方法可以判断某属性是否是该对象的实例属性</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> myObject) &#123;</span><br><span class="line">　　<span class="keyword">if</span>（myObject.<span class="title function_">hasOwnProperty</span>(key))&#123;</span><br><span class="line">　　　　<span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样可以通过ES5的Object.keys(myObject)获取对象的实例属性组成的数组，不包括原型方法和属性</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">method</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">　　<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myObject=&#123;</span><br><span class="line">　　<span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">　　<span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">　　<span class="attr">c</span>:<span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><p>for..of适用遍历数&#x2F;数组对象&#x2F;字符串&#x2F;map&#x2F;set等拥有迭代器对象的集合.但是不能遍历对象,因为没有迭代器对象.与forEach()不同的是，它可以正确响应break、continue和return语句</p><p>for-of循环不支持普通对象，但如果你想迭代一个对象的属性，你可以用for-in循环（这也是它的本职工作）或内建的Object.keys()方法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(someObject)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot;: &quot;</span> + someObject[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历map对象时适合用解构,例如;</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key, value] <span class="keyword">of</span> phoneBookMap) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot;&#x27;s phone number is: &quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有拥有[Symbol.iterator]的对象被称为可迭代的。你会发现，可迭代对象的概念几乎贯穿于整门语言之中，不仅是for-of循环，还有Map和Set构造函数、解构赋值，以及新的展开操作符。</p><h4 id="for-of的步骤"><a href="#for-of的步骤" class="headerlink" title="for of的步骤"></a>for of的步骤</h4><p>见上。</p><h1 id="迭代器应用"><a href="#迭代器应用" class="headerlink" title="迭代器应用"></a>迭代器应用</h1><h3 id="自定义遍历数据"><a href="#自定义遍历数据" class="headerlink" title="自定义遍历数据"></a>自定义遍历数据</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> banji = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;LPL&quot;</span>,</span><br><span class="line">    <span class="attr">stus</span>:[</span><br><span class="line">        <span class="string">&#x27;ming&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ning&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tian&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;knight&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">next</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(index &lt; _this.<span class="property">stus</span>.<span class="property">length</span>)&#123;</span><br><span class="line">                     <span class="keyword">const</span> result =&#123;<span class="attr">value</span>:_this.<span class="property">stus</span>[index],<span class="attr">done</span>:<span class="literal">false</span>&#125;;</span><br><span class="line">                    <span class="comment">//下标自增</span></span><br><span class="line">                    index++;</span><br><span class="line">                    <span class="comment">//返回结果</span></span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span>&#123;<span class="attr">value</span>:<span class="literal">undefined</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> banji)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> 前端基础 </tag>
            
            <tag> 迭代器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 symbol</title>
      <link href="/2022/03/28/ES6/ES6-symbol/"/>
      <url>/2022/03/28/ES6/ES6-symbol/</url>
      
        <content type="html"><![CDATA[<h1 id="Symbol-概述"><a href="#Symbol-概述" class="headerlink" title="Symbol 概述"></a>Symbol 概述</h1><p>Symbol 概述：</p><p> ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是JavaScript 语言的第七种数据类 型，是一种类似于字符串的数据类型；</p><p>参考文章：<a href="https://blog.csdn.net/fesfsefgs/article/details/108354248">https://blog.csdn.net/fesfsefgs/article/details/108354248</a> </p><h1 id="Symbol-特点"><a href="#Symbol-特点" class="headerlink" title="Symbol 特点"></a>Symbol 特点</h1><p>Symbol 特点：</p><ol><li>Symbol 的值是唯一的，用来解决命名冲突的问题；</li><li>Symbol 值不能与其他数据进行运算；</li><li>Symbol 定义的对象属性不能使用for…in循环遍历 ，但是可以使用Reflect.ownKeys 来获取对象的 所有键名；</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建symbol</span></span><br><span class="line"><span class="comment">//第一种方式</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s,<span class="keyword">typeof</span> s);</span><br><span class="line"><span class="comment">//打印  Symbol()  &quot;symbol&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加字符串</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;李天宇&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&#x27;李天宇&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2 === s3);</span><br><span class="line"><span class="comment">//打印 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Symbol.for 创建</span></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;李天宇&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4,<span class="keyword">typeof</span> s4);</span><br><span class="line"><span class="comment">//打印  Symbol(李天宇)  &quot;symbol&quot;</span></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;李天宇&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s5 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;李天宇&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4 === s5);</span><br><span class="line"><span class="comment">//打印 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不能与其他数据进行运算</span></span><br><span class="line"><span class="comment">// let result = s + 100;</span></span><br><span class="line"><span class="comment">// let result = s &gt; 100;</span></span><br><span class="line"><span class="comment">// let result = s + s;</span></span><br></pre></td></tr></table></figure><p>js数据类型</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">// USONB you are so niubility</span><br><span class="line">// u undefined 未定义</span><br><span class="line">// s string 字符串 symbol 独一无二的值</span><br><span class="line">// o object 对象</span><br><span class="line">// n null 对空 number 数字</span><br><span class="line">// b boolean 布尔</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>**值类型(基本类型)**：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p><p><strong>引用数据类型（对象类型）</strong>：对象(Object)、数组(Array)、函数(Function)，还有两个特殊的对象：正则（RegExp）和日期（Date）。</p><h1 id="symbol添加对象属性和方法"><a href="#symbol添加对象属性和方法" class="headerlink" title="symbol添加对象属性和方法"></a>symbol添加对象属性和方法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向对象中添加方法 up down</span></span><br><span class="line"><span class="keyword">let</span> game = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;俄罗斯方块&#x27;</span>,</span><br><span class="line"><span class="attr">up</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line"><span class="attr">down</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 我们要往game对象里面添加方法，但是怕game对象已经存在</span></span><br><span class="line"><span class="comment">// 同名方法，所以我们这时使用到了Symbol</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="comment">//声明对象</span></span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line">    <span class="attr">up</span>:<span class="title class_">Symbol</span>(),</span><br><span class="line">    <span class="attr">down</span>:<span class="title class_">Symbol</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">game[methods.<span class="property">up</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我上&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">game[methods.<span class="property">down</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我下&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(game);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="keyword">let</span> youxi = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;狼人杀&quot;</span>,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;say&#x27;</span>)]()<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我说&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;boom&#x27;</span>)]:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我炸&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(youxi);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何调用方法？？？ 讲师没讲，这是弹幕说的方法</span></span><br><span class="line"><span class="keyword">let</span> say = <span class="title class_">Symbol</span>(<span class="string">&#x27;say&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> youxi1 = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;狼人杀&quot;</span>,</span><br><span class="line">[say]: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以发言&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">[<span class="title class_">Symbol</span>(<span class="string">&#x27;zibao&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以自爆&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">youxi1[say]();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="symbol内置值"><a href="#symbol内置值" class="headerlink" title="symbol内置值"></a>symbol内置值</h1><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><p> 除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方 法。可以称这些方法为魔术方法，因为它们会在特定的场景下自动执行；</p><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><table><thead><tr><th>内置Symbol的值</th><th>调用时机</th></tr></thead><tbody><tr><td>Symbol.hasInstance</td><td>当其他对象使用 instanceof 运算符，判断是否为该对象的实例时，会调用这个方法</td></tr><tr><td>Symbol.isConcatSpreadable</td><td>对象的 Symbol.isConcatSpreadable 属性等于的是一个布尔值，表示该对象用于 Array.prototype.concat()时，是否可以展开。</td></tr><tr><td>Symbol.species</td><td>创建衍生对象时，会使用该属性</td></tr><tr><td>Symbol.match</td><td>当执行 str.match(myObject) 时，如果该属性存在，会调用它，返回该方法的返回值。</td></tr><tr><td>Symbol.replace</td><td>当该对象被 str.replace(myObject)方法调用时，会返回该方法的返回值。</td></tr><tr><td>Symbol.search</td><td>当该对象被 str. search (myObject)方法调用时，会返回该方法的返回值。</td></tr><tr><td>Symbol.split</td><td>当该对象被 str. split (myObject)方法调用时，会返回该方法的返回值。</td></tr><tr><td>Symbol.iterator</td><td>对象进行 for…of 循环时，会调用 Symbol.iterator 方法，返回该对象的默认遍历器</td></tr><tr><td>Symbol.toPrimitive</td><td>该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。</td></tr><tr><td>Symbol. toStringTag</td><td>在该对象上面调用 toString 方法时，返回该方法的返回值</td></tr><tr><td>Symbol. unscopables</td><td>该对象指定了使用 with 关键字时，哪些属性会被 with环境排除。</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](param)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(param);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我被用来检测类型了&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o <span class="keyword">instanceof</span> <span class="title class_">Person</span>)</span><br><span class="line"><span class="comment">//意思就是当出现了instanceof时，symbol的hasInstance属性就会被触发，并且可以把要判断的实例对象传进来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="comment">// 合并数组：false数组不可展开，true可展开</span></span><br><span class="line">arr2[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">concat</span>(arr2));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> 前端基础 </tag>
            
            <tag> symbol </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6函数参数</title>
      <link href="/2022/03/28/ES6/ES6-11%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/03/28/ES6/ES6-11%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h1><p>es6允许给函数参数赋值初始值</p><p>​    1&#x2F;形参初始值  具有默认值的参数，一般位置要靠后</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b,c</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="comment">//此时输出为6</span></span><br></pre></td></tr></table></figure><p>赋初始值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b,c=<span class="number">10</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="comment">//此时输出为13</span></span><br></pre></td></tr></table></figure><p>2.与解构赋值结合使用</p><p>结合前</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">options</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> host = options.<span class="property">host</span>;</span><br><span class="line">    <span class="keyword">let</span> username = options.<span class="property">username</span>;</span><br><span class="line">    <span class="comment">//注意此时每次获取都要重复options</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;lty123&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结合后</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">host=<span class="string">&quot;127.0.0.1&quot;</span>,username,password,port</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(host)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(username)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(password)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(port) </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;lty123&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//注意此时，如果调用时，对象里host没有传，走默认值，要是传了，走对象里的赋值</span></span><br></pre></td></tr></table></figure><h1 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h1><p>&#x2F;&#x2F;es6 引入rest参数，用于获取函数的实参，用来代替arguments</p><h3 id="es5获取实参的方式"><a href="#es5获取实参的方式" class="headerlink" title="es5获取实参的方式"></a>es5获取实参的方式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">date</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">date</span>(<span class="string">&#x27;白芷&#x27;</span>,<span class="string">&#x27;阿娇&#x27;</span>,<span class="string">&#x27;思慧&#x27;</span>);</span><br><span class="line"><span class="comment">//原型不是一个数组，是一个对象</span></span><br></pre></td></tr></table></figure><h3 id="rest参数-1"><a href="#rest参数-1" class="headerlink" title="rest参数"></a>rest参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">date</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">date</span>(<span class="string">&#x27;白芷&#x27;</span>,<span class="string">&#x27;阿娇&#x27;</span>,<span class="string">&#x27;思慧&#x27;</span>);</span><br><span class="line"><span class="comment">//这样会显示数组</span></span><br></pre></td></tr></table></figure><p>数组的话就可以使用数组的方法：filter some every map等</p><p>提高了对参数处理的灵活度</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>rest参数必须放在参数最后</p><p>举例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a,b,...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">(<span class="number">4</span>)[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><h1 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&#x2F;&#x2F;   …   扩展运算符能将 数组 转换为逗号分隔的 参数序列</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明一个数组</span></span><br><span class="line"><span class="keyword">const</span> tfboys = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"><span class="comment">//通过...转化为参数序列</span></span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>];   =&gt; <span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span></span><br></pre></td></tr></table></figure><p>演示</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">chunwan</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">chunwan</span>(tfboys);</span><br><span class="line">输出数组 === <span class="title function_">chunwan</span>([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>])</span><br><span class="line"><span class="title function_">chunwan</span>(...tfboys);</span><br><span class="line">输出参数序列 === <span class="title function_">chunwan</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组的合并</span></span><br><span class="line"><span class="keyword">const</span> kuaizi = [<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> fenghuang = [<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;L&#x27;</span>];</span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="keyword">const</span> zuixuanxiaopingguo = kuaizi.<span class="title function_">concat</span>(fenghuang);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zuixuanxiaopingguo);</span><br><span class="line"><span class="comment">//打印(4)[&#x27;W&#x27;,&#x27;X&#x27;,&#x27;Z&#x27;,&#x27;L&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用扩展运算符</span></span><br><span class="line"><span class="keyword">const</span> zuixuanxiaopingguo = [...kuaizi,...fenghuang];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zuixuanxiaopingguo);</span><br><span class="line"><span class="comment">//打印(4)[&#x27;W&#x27;,&#x27;X&#x27;,&#x27;Z&#x27;,&#x27;L&#x27;]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组的克隆</span></span><br><span class="line"><span class="keyword">const</span> sanzhihua = [<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;m&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> sanyecao = [...sanzhihua];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sanyecao);</span><br><span class="line"><span class="comment">//打印(3)[&#x27;e&#x27;,&#x27;g&#x27;,&#x27;m&#x27;]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将伪数组转为真正数组</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>    </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>    </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(divs);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">//打印为数组，但其_proto_:object</span></span><br><span class="line"><span class="keyword">const</span> divArr = [...divs];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divArr);</span><br><span class="line"><span class="comment">//打印为数组，其_proto_:Array(0)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李老师小课堂第二节</title>
      <link href="/2022/03/26/22/"/>
      <url>/2022/03/26/22/</url>
      
        <content type="html"><![CDATA[<h1 id="程序的本质是什么"><a href="#程序的本质是什么" class="headerlink" title="程序的本质是什么"></a>程序的本质是什么</h1><h2 id="什么是程序"><a href="#什么是程序" class="headerlink" title="什么是程序"></a>什么是程序</h2><p>安少：XXX</p><p>李老师：程序是一段代码，进程:运行的代码</p><h3 id="程序是怎么变成进程的"><a href="#程序是怎么变成进程的" class="headerlink" title="程序是怎么变成进程的"></a>程序是怎么变成进程的</h3><p>编译+运行</p><h4 id="为什么要编译"><a href="#为什么要编译" class="headerlink" title="为什么要编译"></a>为什么要编译</h4><p>计算机只认识——汇编语言</p><p>三个字组成的指令——指令集——去调硬件的接口</p><p>所以高级语言去连接汇编语言，汇编语言再去搞硬件</p><h4 id="什么是静态语言-x2F-动态语言"><a href="#什么是静态语言-x2F-动态语言" class="headerlink" title="什么是静态语言&#x2F;动态语言"></a>什么是静态语言&#x2F;动态语言</h4><p>动态语言：边编译，边运行|没有基本类型</p><p>话外题：P和J的区别：</p><h3 id="进程跑在哪："><a href="#进程跑在哪：" class="headerlink" title="进程跑在哪："></a>进程跑在哪：</h3><p>第一层：物理机</p><p>第二层：操作系统（用户进程）–&gt;协同和硬件抽象</p><h6 id="怎么理解代码的进程"><a href="#怎么理解代码的进程" class="headerlink" title="怎么理解代码的进程"></a>怎么理解代码的进程</h6><p>流水线</p><h2 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h2><h3 id="多个进程如何一起工作"><a href="#多个进程如何一起工作" class="headerlink" title="多个进程如何一起工作"></a>多个进程如何一起工作</h3><p>操作系统用来调节进程资源</p><h5 id="进程的调度"><a href="#进程的调度" class="headerlink" title="进程的调度"></a>进程的调度</h5><p>并发：类比并行</p><p>并行从时间点出发，多个任务同时运行，电脑多处理器</p><p>并发从时间段出发，在一个时间段内，多个进程同时发生，称为并发</p><h5 id="多进程举例"><a href="#多进程举例" class="headerlink" title="多进程举例"></a>多进程举例</h5><p>chrome和老IE</p><h3 id="重头戏"><a href="#重头戏" class="headerlink" title="重头戏"></a>重头戏</h3><p>虚拟机：对内存进行抽象，抽象成两块：栈stack   堆 heap</p><p>好多栈，一个堆</p><p>所有的基本类型都活在栈里面</p><p>高级类型在静态语言中可以理解为：对象和数组  Object Array</p><p>可以说所以的高级类型都是指针，但其无法定义，可以活在栈里也可以活在堆里</p><p>stack overflow<a href="https://baike.baidu.com/item/%E5%A0%86%E6%A0%88/1682032">堆栈</a>（Stack）是一种抽象数据结构，是一组相同数据类型的组合，所有的操作均在堆栈顶端进行，具有“后进先出”的特性，即最后一个放入堆栈中的物体总是被最先拿出来。堆栈中两个最重要的是PUSH（进栈）和POP（出栈）， PUSH操作在堆栈的顶部加入一 个元素，POP操作相反， 在堆栈顶部移去一个元素， 并将堆栈的大小减一。水满则溢，堆栈是有一定容量限制的，当超出了该容量限制，就会发生溢出。</p><p>out of memory内存溢出(Out Of Memory，简称OOM)是指应用系统中存在无法回收的<a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98/103614">内存</a>或使用的<a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98/103614">内存</a>过多，最终使得程序运行要用到的<a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98/103614">内存</a>大于能提供的最大内存。此时<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F/13831935">程序</a>就运行不了，系统会提示内存溢出，有时候会<a href="https://baike.baidu.com/item/%E8%87%AA%E5%8A%A8/9374325">自动</a><a href="https://baike.baidu.com/item/%E5%85%B3%E9%97%AD/2901526">关闭</a>软件，重启电脑或者软件后释放掉一部分内存又可以正常运行该软件，而由<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/558913">系统配置</a>、<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%B5%81/3002243">数据流</a>、用户代码等原因而导致的内存溢出错误，即使用户重新执行任务依然无法避免。</p><p>最后：</p><p>什么是垃圾</p><p>方法出去后链断掉后的东西等</p><p>虚拟机什么时候回收辣鸡：满了、快满了、时间循环等</p><p>下回分解————————数据结构大串讲</p><p>数组        链表</p><p>特殊的东西：树 |图      </p><p>特殊的树：二叉树、红黑树、B树、B+树</p><p>数组扩容&#x2F;链表扩容：</p><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><p>高级数据类型都是通过指针来操作的</p>]]></content>
      
      
      <categories>
          
          <category> 李老师小课堂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试授课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WHO AM I</title>
      <link href="/2022/03/24/11/"/>
      <url>/2022/03/24/11/</url>
      
        <content type="html"><![CDATA[<h1 id="大家好，我在这里创建小窝，是为了分享我遇到的一些Bug和我的一些日常，希望能对大家有帮助。"><a href="#大家好，我在这里创建小窝，是为了分享我遇到的一些Bug和我的一些日常，希望能对大家有帮助。" class="headerlink" title="大家好，我在这里创建小窝，是为了分享我遇到的一些Bug和我的一些日常，希望能对大家有帮助。"></a>大家好，我在这里创建小窝，是为了分享我遇到的一些Bug和我的一些日常，希望能对大家有帮助。</h1><h2 id="严肃的自我介绍"><a href="#严肃的自我介绍" class="headerlink" title="严肃的自我介绍"></a>严肃的自我介绍</h2><h3 id="我是谁"><a href="#我是谁" class="headerlink" title="我是谁"></a>我是谁</h3><p>北京科技大学计算机与通信工程学院的一名科研狗，目前住在三斋，在机电楼上班。</p><h3 id="年龄"><a href="#年龄" class="headerlink" title="年龄"></a>年龄</h3><p>23 99属兔</p><h3 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h3><p>前端？可以说是没学会，但后端的东西更不懂了</p><h3 id="为什么学通信"><a href="#为什么学通信" class="headerlink" title="为什么学通信"></a>为什么学通信</h3><p>因为考上研了，之前学的电子信息工程，邪了门了</p><h3 id="兴趣爱好"><a href="#兴趣爱好" class="headerlink" title="兴趣爱好"></a>兴趣爱好</h3><p>热爱游戏，但苦于没钱买，爱折腾简陋的数码产品，还是穷，平时打打羽毛球，看看美女姐姐&#x2F;妹妹</p><div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg"></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 我的日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ME </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一份测试blos</title>
      <link href="/2022/03/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%BB%BD%E6%B5%8B%E8%AF%95blos/"/>
      <url>/2022/03/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%BB%BD%E6%B5%8B%E8%AF%95blos/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎光临"><a href="#欢迎光临" class="headerlink" title="欢迎光临"></a>欢迎光临</h1><h1 id="你好先生"><a href="#你好先生" class="headerlink" title="你好先生"></a>你好先生</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">这里是代码框的测试</span><br></pre></td></tr></table></figure><h3 id="你好女士"><a href="#你好女士" class="headerlink" title="你好女士"></a>你好女士</h3><ul><li>1这里是</li><li>1列表测试</li><li>3</li></ul><h3 id="这里是tag-hide测试"><a href="#这里是tag-hide测试" class="headerlink" title="这里是tag-hide测试"></a>这里是tag-hide测试</h3><p>哪个英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因为西装裤(C装酷)</span></span></p><p>门里站着一个人? <span class="hide-inline"><button type="button" class="hide-button" style>Click  </button><span class="hide-content">闪</span></span></p><h3 id="测试mermaid"><a href="#测试mermaid" class="headerlink" title="测试mermaid"></a>测试mermaid</h3><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  5  </pre></div><h3 id="测试tabs"><a href="#测试tabs" class="headerlink" title="测试tabs"></a>测试tabs</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line"><span class="code">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.</span></span><br><span class="line"><span class="code">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span></span><br><span class="line"><span class="code">                Only for current url of post/page must be unique!</span></span><br><span class="line"><span class="code">[index]       : Index number of active tab.</span></span><br><span class="line"><span class="code">                If not specified, first tab (1) will be selected.</span></span><br><span class="line"><span class="code">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[Tab caption] : Caption of current tab.</span></span><br><span class="line"><span class="code">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span></span><br><span class="line"><span class="code">                If not caption specified, but specified icon, caption will empty.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[@icon]       : FontAwesome icon name (full-name, look like &#x27;fas fa-font&#x27;)</span></span><br><span class="line"><span class="code">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab caption@icon&#x27;.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br></pre></td></tr></table></figure><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="测试button"><a href="#测试button" class="headerlink" title="测试button"></a>测试button</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class="line"></span><br><span class="line">[url]         : 链接</span><br><span class="line">[text]        : 按钮文字</span><br><span class="line">[icon]        : [可选] 图标</span><br><span class="line">[color]       : [可选] 按钮背景顔色(默认style时）</span><br><span class="line"><span class="code">                      按钮字体和边框顔色(outline时)</span></span><br><span class="line"><span class="code">                      default/blue/pink/red/purple/orange/green</span></span><br><span class="line"><span class="code">[style]       : [可选] 按钮样式 默认实心</span></span><br><span class="line"><span class="code">                      outline/留空</span></span><br><span class="line"><span class="code">[layout]      : [可选] 按钮佈局 默认为line</span></span><br><span class="line"><span class="code">                      block/留空</span></span><br><span class="line"><span class="code">[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边</span></span><br><span class="line"><span class="code">                      center/right/留空</span></span><br><span class="line"><span class="code">[size]        : [可选] 按钮大小</span></span><br><span class="line"><span class="code">                      larger/留空</span></span><br></pre></td></tr></table></figure><p>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/" title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/" title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p><div class="btn-center"><a class="btn-beautify outline larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline blue larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline pink larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline red larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline purple larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline orange larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline green larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></div>### 测试inlinelmg<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% inlineImg [src] [height] %&#125;</span><br><span class="line"></span><br><span class="line">[src]      :    图片链接</span><br><span class="line">[height]   ：   图片高度限制【可选】</span><br></pre></td></tr></table></figure><p>你看我长得漂亮不</p><p><img src="https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png"></p><p>我觉得很漂亮 <img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:150px"></p><h3 id="测试label"><a href="#测试label" class="headerlink" title="测试label"></a>测试label</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><p>臣亮言：<mark class="hl-label default">先帝</mark> 创业未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此诚<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p><h3 id="测试timeline"><a href="#测试timeline" class="headerlink" title="测试timeline"></a>测试timeline</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% timeline title,color %&#125;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline undefined"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div></div><div class="timeline pink"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div></div><h3 id="测试flink"><a href="#测试flink" class="headerlink" title="测试flink"></a>测试flink</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line">xxxxxx</span><br><span class="line">&#123;% endflink %&#125;</span><br></pre></td></tr></table></figure><div class="flink"><div class="flink-name">友情链接</div><div class="flink-desc">那些人，那些事</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://jerryc.me/" title="JerryC" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://jerryc.me/img/avatar.png" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="JerryC">              </div>              <div class="flink-item-name">JerryC</div>               <div class="flink-item-desc" title="今日事,今日毕">今日事,今日毕</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://hexo.io/zh-tw/" title="Hexo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Hexo">              </div>              <div class="flink-item-name">Hexo</div>               <div class="flink-item-desc" title="快速、简单且强大的网誌框架">快速、简单且强大的网誌框架</div>            </a>          </div></div><div class="flink-name">网站</div><div class="flink-desc">值得推荐的网站</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.youtube.com/" title="Youtube" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Youtube">              </div>              <div class="flink-item-name">Youtube</div>               <div class="flink-item-desc" title="视频网站">视频网站</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.weibo.com/" title="Weibo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Weibo">              </div>              <div class="flink-item-name">Weibo</div>               <div class="flink-item-desc" title="中国最大社交分享平臺">中国最大社交分享平臺</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://twitter.com/" title="Twitter" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Twitter">              </div>              <div class="flink-item-name">Twitter</div>               <div class="flink-item-desc" title="社交分享平臺">社交分享平臺</div>            </a>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/24/hello-world/"/>
      <url>/2022/03/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
